name: .NET Core

on:
  push:
    branches: 
      - master
  pull_request:
    branches: 
      - master
      
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com
        ECR_REPOSITORY: api
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build \
        --build-arg Auth0__ManagementApiClientSecret=${{ secrets.AUTH0__MANAGEMENTAPICLIENTSECRET }} \
        --build-arg Auth0__ManagementApiClientId=${{ secrets.AUTH0__MANAGEMENTAPICLIENTID }} \
        --build-arg Auth0__Domain=${{ secrets.AUTH0__DOMAIN }} \
        --build-arg Auth0__ClientSecret=${{ secrets.AUTH0__CLIENTSECRET }} \
        --build-arg Auth0__ClientId=${{ secrets.AUTH0__CLIENTID }} \
        -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: api
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: api
        cluster: publate-cluster
        wait-for-service-stability: true